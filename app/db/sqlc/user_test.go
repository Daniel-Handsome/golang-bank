// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: user.sql

package db

import (
	"context"
	"reflect"
	"testing"
	"time"

	"github.com/stretchr/testify/require"

	"github.com/daniel/master-golang/utils"
)

func randomCreteUsers(t *testing.T) User {
	arg := CreateUserParams{
		Name: utils.RandOwner(),
		Password: "test",
		FullName: utils.RandOwner(),
		Email: utils.RandEmail(),
	}

	user, err := testQueries.CreateUser(context.Background(), arg)
	require.NoError(t, err)
	require.NotEmpty(t, user)

	require.Equal(t, arg.Name, user.Name)
	require.Equal(t, arg.Password, user.Password)
	require.Equal(t, arg.FullName, user.FullName)
	require.Equal(t, arg.Email, user.Email)

	// 1 月 1 日，1 年，00:00:00 UTC。 用isZero判斷
	require.True(t, user.PasswordChangeAt.IsZero())
	require.NotZero(t, user.CreateAt)

	return user
}

// func TestCreateUser(t *testing.T) {
// 	type fields struct {
// 		db DBTX
// 	}
// 	type args struct {
// 		ctx context.Context
// 		arg CreateUserParams
// 	}
// 	tests := []struct {
// 		name    string
// 		fields  fields
// 		args    args
// 		want    User
// 		wantErr bool
// 	}{
// 		// TODO: Add test cases.
// 	}
// 	for _, tt := range tests {
// 		t.Run(tt.name, func(t *testing.T) {
// 			q := &Queries{
// 				db: tt.fields.db,
// 			}
// 			got, err := q.CreateUser(tt.args.ctx, tt.args.arg)
// 			if (err != nil) != tt.wantErr {
// 				t.Errorf("Queries.CreateUser() error = %v, wantErr %v", err, tt.wantErr)
// 				return
// 			}
// 			if !reflect.DeepEqual(got, tt.want) {
// 				t.Errorf("Queries.CreateUser() = %v, want %v", got, tt.want)
// 			}
// 		})
// 	}
// }

func TestGetUser(t *testing.T) {
	user1 := randomCreteUsers(t)

	user2 , err := testQueries.GetUser(context.Background(), user1.Name)
	require.NoError(t, err)
	require.Equal(t, user1.Name, user2.Name)
	require.Equal(t, user1.Password, user2.Password)
	require.Equal(t, user1.FullName, user2.FullName)
	require.Equal(t, user1.Email, user2.Email)

	require.WithinDuration(t, user1.PasswordChangeAt, user2.PasswordChangeAt, time.Second)
	require.WithinDuration(t, user1.CreateAt, user2.CreateAt, time.Second)
}
